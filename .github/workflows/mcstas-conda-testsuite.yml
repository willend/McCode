name: mcstas-conda-testsuite
on:
  schedule:
    - cron: '00 02 * * *'  # 02:00 every day

  workflow_dispatch:
    inputs:
      manual-debugging:
        type: boolean
        description: Launch manual debugging tmate for inspection (automatic in case of errors)
        default: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, python: '3.12', mpi: 'openmpi' }
          - { os: ubuntu-latest, python: '3.12', mpi: 'mpich' }
          - { os: macos-latest, python: '3.12', mpi: 'openmpi' }
          - { os: macos-latest, python: '3.12', mpi: 'mpich' }
          - { os: windows-latest, python: '3.12', mpi: 'msmpi' }
#          - { os: windows-11-arm, python: '3.12', mpi: 'msmpi' }

    name: ${{ matrix.os }}.${{ matrix.mpi }}.python-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
    defaults:
      run:
        shell: bash -el {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        path: src

    - name: Setup VS in shell Intel
      if: runner.os == 'Windows' && matrix.os != 'windows-11-arm'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup VS in shell arm64
      if: runner.os == 'Windows' && matrix.os == 'windows-11-arm'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: arm64

    - uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: mcstas
        auto-update-conda: true
        conda-remove-defaults: true
        channels: conda-forge
        python-version: ${{ matrix.python }}

    - name: Setup conda
      id: setup-conda
      run: |
           ./src/devel/bin/mccode-create-conda-yml -m mcstas -n mcstas -o dependencies.yml
           conda env update --file dependencies.yml --prune

    - name: Check versions
      id: version-checks
      run: |
           which python3
           python3 --version
           which cmake
           cmake --version
           if [ "$RUNNER_OS" != "Windows" ];
           then
             echo C compiler: $CC
             $CC --version
           fi

    - name: Configure build and install mcstas
      id: mcstas-install
      run: |
           ./src/devel/bin/mccode-build-conda -m mcstas -s $PWD/src -b $PWD/build_mcstas

    - name: Post install checks
      id: post-install-checks
      if: runner.os != 'Windows' 
      run: |
           export MCSTAS_EXECUTABLE="mcstas"
           export MCRUN_EXECUTABLE="mcrun"
           if [ "$RUNNER_OS" == "Windows" ];
           then
             export MCSTAS_EXECUTABLE="mcstas.exe"
             export MCRUN_EXECUTABLE="mcrun.bat"
             cd ${CONDA_PREFIX}
             TOPDIR=`cygpath -m $PWD`
             cd -
           fi
           test -f "${CONDA_PREFIX}/bin/${MCSTAS_EXECUTABLE}"
           test -f "${CONDA_PREFIX}/bin/${MCRUN_EXECUTABLE}"
           test -f "${CONDA_PREFIX}/share/mcstas/tools/Python/mccodelib/__init__.py"
           test -d "${CONDA_PREFIX}/share/mcstas/resources/data"
           if [ "$RUNNER_OS" == macOS ]; then
             if [ "${{ matrix.mpi }}" == "openmpi" ]; then
               sed -i.bak 's+mpirun+mpirun\ -mca\ regx\ naive\ --verbose\ --mca\ btl_tcp_if_include\ lo0+g' ${CONDA_PREFIX}/share/mcstas/tools/Python/mccodelib/mccode_config.json
             fi
           fi
           if [ "$RUNNER_OS" == Windows ]; then
             export CONDAPREF=`cygpath -m ${CONDA_PREFIX}`
             sed -i.bak 's+/DUSE_NEXUS+/I${CONDAPREF}/Library/include/nexus /DUSE_NEXUS+g' ${CONDA_PREFIX}/share/mcstas/tools/Python/mccodelib/mccode_config.json
             sed -i.bak 's+${CONDA_PREFIX}+'${CONDAPREF}'+g' ${CONDA_PREFIX}/share/mcstas/tools/Python/mccodelib/mccode_config.json
           fi
           echo *******************************************************************************
           echo Resulting mccode_config.json:
           echo *******************************************************************************
           cat ${CONDA_PREFIX}/share/mcstas/tools/Python/mccodelib/mccode_config.json
           echo *******************************************************************************

    - name: Test suite, up to 2-core MPI
      id: test-suite
      run: |
           export PATH=${PATH}:${CONDA_PREFIX}/bin/:${CONDA_PREFIX}/bin/
           mkdir run_test-suite && cd run_test-suite
           export MCTEST_EXECUTABLE="mctest"
           if [ "$RUNNER_OS" == "Windows" ];
           then
             export MCTEST_EXECUTABLE="mctest.bat --permissive"
           fi
           if [ "$RUNNER_OS" == "macOS" ];
           then
             mkdir ${HOME}/tmp
             export TMPDIR=${HOME}/tmp
           fi
           echo $PATH
           if [ "${{ matrix.os }}" != "windows-11-arm" ];
           then
             ${MCTEST_EXECUTABLE} --verbose --testdir $PWD --suffix ${{ matrix.os }}_${{ matrix.mpi }} --mpi=2
           else
             ${MCTEST_EXECUTABLE} --verbose --testdir $PWD --suffix ${{ matrix.os }}
           fi

    - name: 'Tar output files'
      id: tar-package
      if: always()
      run: |
           set -e
           set -u
           set -x
           ./src/devel/bin/cleanfiles -d run_test_suite 
           tar cvfz mcstas-${{ matrix.os }}.${{ matrix.mpi }}.python-${{ matrix.python }}_output.tgz run_test-suite

    - name: 'Upload Artifact'
      id: tar-upload
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mcstas-artefacts-${{ matrix.os }}.${{ matrix.mpi }}.python-${{ matrix.python }}
        path: "mcstas-${{ matrix.os }}.${{ matrix.mpi }}.python-${{ matrix.python }}_output.tgz"

    - name: Setup tmate session for manual debugging
      uses: mxschmitt/action-tmate@v3
      if: always() && (inputs.manual-debugging == true)
      with:
        limit-access-to-actor: true
