/*****************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         DTU Physics, Kgs. Lyngby, Denmark
*         Synchrotron SOLEIL, Saint-Aubin, France
*
* Component: FluoPowder
*
* %Identification
* Written by: Emmanuel Farhi (emmanuel.farhi.synchrotron-soleil.fr)
* Date:       April 2025
* Origin:     Synchrotron SOLEIL
* Release:    McXtrace 3.5
*
* Sample model handling absorption, fluorescence, Compton, Rayleigh scattering and powder diffraction.
*
* %Description
* Sample that models multiple photon-matter interactions:
* - absorption          (photon excites an electron and creates a hole)
* - fluorescence        (excited electrons emit light while falling into lower states)
* - Compton scattering  (inelastic, incoherent)
* - Rayleigh scattering (elastic,   coherent)
* - powder diffraction  (elastic,   coherent)
*
* The 'material' specification is given as a chemical formulae, e.g. "LaB6". It
* may also be given as a file name (CIF/LAU/LAZ/FullProf format) in which case
* the formulae is guessed (but may be approximative), and the powder
* diffraction is computed, following same options as the <b>PowderN</b>
* sample component. The fluorescence is handled for atoms from Z=5 to Z=90.
*
* By setting the 'order' to 1, the absorption along the scattered path is handled.
* A higher 'order' will handle multiple scattering events, and final absorption.
* For instance, a value order>=2 handles e.g. fluorescence iterative cascades
* in the material. Leaving 'order=0' handles the single scattering only.
*
* Example: FluoPowder(material="LaB6.cif",
*  xwidth=0.001,yheight=0.001,zdepth=0.0001, p_interact=0.99,
*  target_index=1, focus_xw=0.0005, focus_yh=0.0005)
*
* <b>Sample shape:</b>
* Sample shape may be a cylinder, a sphere, a box or any other shape
*   box/plate:       xwidth x yheight x zdepth (thickness=0)
*   hollow box/plate:xwidth x yheight x zdepth and thickness>0
*   cylinder:        radius x yheight (thickness=0)
*   hollow cylinder: radius x yheight and thickness>0
*   sphere:          radius (yheight=0 thickness=0)
*   hollow sphere:   radius and thickness>0 (yheight=0)
*   any shape:       geometry=OFF file
*
*   The complex geometry option handles any closed non-convex polyhedra.
*   It computes the intersection points of the photon ray with the object
*   transparently, so that it can be used like a regular sample object.
*   It supports the OFF, PLY and NOFF file format but not COFF (colored faces).
*   Such files may be generated from XYZ data using:
*     qhull < coordinates.xyz Qx Qv Tv o > geomview.off
*   or
*     powercrust coordinates.xyz
*   and viewed with geomview or java -jar jroff.jar (see below).
*   The default size of the object depends of the OFF file data, but its
*   bounding box may be resized using xwidth,yheight and zdepth.
*
* <b>Concentric components:</b>
* This component has the ability to contain other components when used in
* hollow cylinder geometry (namely sample environment, e.g. cryostat and
* furnace structure). Such component 'shells' should be split into input and
* output side surrounding the 'inside' components. First part must then use
* 'concentric=1' flag to enter the inside part. The component itself must be
* repeated to mark the end of the concentric zone. The number of concentric
* shells and number of components inside is not limited.
*
* COMPONENT F_in = FluoPowder(material="Al", concentric=1, ...)
* AT (0,0,0) RELATIVE sample_position
*
* COMPONENT something_inside ... // e.g. the sample itself or other materials
*
* COMPONENT F_out = COPY(F_in)(concentric=0)
* AT (0,0,0) RELATIVE sample_position
*
* <b>Enhancing computation efficiency:</b>
* An important option to enhance statistics is to set 'p_interact' to, say,
* 30 percent (0.3) in order to force a fraction of the beam to scatter. This
* will result on a larger number of scattered events, retaining intensity.
*
* In addition, it may be desirable to define a 'target' for the fluorescence
* processes via e.g. the 'target_index' and the 'focus_xw / focus_yh' options.
* This target should e.g. be the SDD area.
* The powder scattering can be focused along an horizontal tore via the
* 'd_phi' and 'tth_sign' options. To get a vertical tore, rotate
* the sample by 90 deg around Z.
*
* This sample component can advantageously benefit from the SPLIT feature, e.g.
* SPLIT COMPONENT sample = FluoPowder(...)
*
* The fluorescence is computed via the XRayLib (apt install libxrl-dev) https://github.com/tschoonj/xraylib.
*
* %Parameters
* material:     [str] A CIF/LAZ/LAU file e.g. "LaB6.cif" to handle diffraction or chemical formulae, e.g. "Pb2SnO4" (no diffraction).
* weight:     [g/mol] Atomic/molecular weight of material.
* density:   [g/cm^3] Density of material. V_rho=density/weight/1e24*N_A at/Angs^3.
* packing_factor: [1] How dense is the material compared to bulk 0-1.
* radius:         [m] Outer radius of sample in (x,z) plane. cylinder/sphere.
* xwidth:         [m] Width for a box sample shape.
* yheight:        [m] Height of sample in vertical direction for box/cylinder shapes.
* zdepth:         [m] Depth for a box sample shape.
* thickness:      [m] Thickness of hollow sample Negative value extends the hollow volume outside of the box/cylinder.
* concentric:     [1] Indicate that this component has a hollow geometry and may contain other components. It should then be duplicated after the inside part (only for box, cylinder, sphere).
* geometry:     [str] Name of an Object File Format (OFF) or PLY file for complex geometry. The OFF/PLY file may be generated from XYZ coordinates using qhull/powercrust.
* p_interact:     [1] Force a given fraction of the beam to scatter, keeping intensity right, to enhance small signals (-1 inactivate).
* focus_xw:       [m] Horiz. dimension of a rectangular area (for fluorescence).
* focus_yh:       [m] Vert.  dimension of a rectangular area (for fluorescence).
* focus_aw:     [deg] Horiz. angular dimension of a rectangular area (for fluorescence).
* focus_ah:     [deg] Vert.  angular dimension of a rectangular area (for fluorescence).
* focus_r:        [m] Radius of disk containing target. Use 0 for full space (for fluorescence).
* target_index:   [1] Relative index of component to focus at, e.g. next is +1 (for fluorescence).
* target_x:       [m] Position of target to focus at, along X (for fluorescence).
* target_y:       [m] Position of target to focus at, along Y (for fluorescence).
* target_z:       [m] Position of target to focus at, along Z (for fluorescence).
* flag_compton:   [1] When 0, the Compton  scattering is ignored.
* flag_rayleigh:  [1] When 0, the Rayleigh scattering is ignored.
* flag_powder:    [1] When 0, the powder diffraction is ignored.
* flag_lorentzian:[1] When 1, the fluorescence line shapes are assumed to be Lorentzian, else Gaussian.
* flag_kissel:    [1] When 1 (slower), handle M-lines XRF from Kissel for Z>=52 Te (else only K and L-lines).
* order:          [1] Limit multiple fluorescence up to given order. Last iteration is absorption only.
* barns:          [1] Flag to indicate if |F|^2 from 'material' is in barns or fm^2, (barns=1 for laz/cif, barns=0 for lau type files).
* d_phi:        [deg] Angle corresponding to the difraction vertical angular range to focus to, e.g. detector height. 0 for no focusing. You may as well define focus_ah or focus_yh and target.
* delta_d_d:     [AA] Global relative difraction Delta_d/d spreading when the 'w' column is not available, e.g. 1e-4 to 1e-3. Use 0 if ideal.
* DW:             [1] Global difraction Debye-Waller factor when the 'DW' column is not available. Use 1 if included in F2.
* nb_atoms:       [1] Number of sub-unit per unit cell, that is ratio of sigma for chemical formula to sigma per unit cell.
* powder_format: [{}] List of structure file column indexes. See the PowderN component.
* powder_refl:  [str] A CIF/LAZ/LAU reflection file as for PowderN. When not given, 'material' is used. Specify it when 'material' is a chemical formula.
* tth_sign:       [1] Sign of the diffraction angle. If 0, the sign is chosen randomly (left and right).
* Vc:          [AA^3] Volume of unit cell=nb atoms per cell/density of atoms.
*
* CALCULATED PARAMETERS:
* type: scattering event type 0=FLUORESCENCE fluorescence, 1=RAYLEIGH Rayleigh, 2=COMPTON Compton, 3=TRANSMISSION Transmit (absorbsion), 4=DIFFRACTION Diffraction
*
* %Link
* The XRayLib https://github.com/tschoonj/xraylib http://dx.doi.org/10.1016/j.sab.2011.09.011
* %Link
* Fluorescence https://en.wikipedia.org/wiki/Fluorescence
* %Link
* Rayleigh https://en.wikipedia.org/wiki/Rayleigh_scattering
* %Link
* Compton https://en.wikipedia.org/wiki/Compton_scattering
* %Link
* X-ray absorption edges http://skuld.bmsc.washington.edu/scatter/AS_periodic.html
* %Link
* X-ray fluorescence spectra http://www.xrfresearch.com/xrf-spectra/
* %Link
* X-ray edges and fluo lines https://physics.nist.gov/PhysRefData/XrayTrans/Html/search.html
*
* %E
***********************************************************/

DEFINE COMPONENT FluoPowder
SETTING PARAMETERS(
  string geometry=0,
  radius=0, thickness=0,
  xwidth=0, yheight=0, zdepth=0,
  int concentric=0,
  string material="LaB6.cif", packing_factor=0, density=0, weight=0,
  p_interact=0,
  target_x = 0, target_y = 0, target_z = 0, focus_r = 0,
  focus_xw=0, focus_yh=0, focus_aw=0, focus_ah=0, int target_index=0,
  int flag_compton=1, int flag_rayleigh=1, int flag_lorentzian=0, int flag_powder=1,
  int flag_kissel=0,
  string powder_refl="",
  vector powder_format={0,0,0,0,0,0,0,0}, Vc=0, delta_d_d=0, DW=0,
  d_phi=0, int nb_atoms=1, int barns=1, int tth_sign=0,
  int order=1)

/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */
DEPENDENCY " @XRLFLAGS@ -DUSE_OFF "
NOACC

/* ========================================================================== */

SHARE 
  INHERIT PowderN
  INHERIT Fluorescence

/* ========================================================================== */

// we can't INHERIT Fluorescence because there is a duplicate conflicting offdata in PowderN
DECLARE 
  INHERIT PowderN EXTEND %{
  struct   compoundData *compound;
  DArray1d cum_massFractions;
  DArray1d cum_xs_fluo;
  DArray1d cum_xs_Compton;
  DArray1d cum_xs_Rayleigh;
  int    shape;
  int    n_fluo;
  int    n_Compton;
  int    n_Rayleigh;
  double p_fluo;
  double p_Compton;
  double p_Rayleigh;
  
  int    n_diff;
  double p_diff;
  double fluo_rho;
  double   reuse_cum_xs_diffraction;
  // offdata is declared in PowderN

  // cached values for SPLIT
  int    reuse_nb;
  int    reuse_intersect;
  double reuse_ki;
  double reuse_l0;
  double reuse_l1;
  double reuse_l2;
  double reuse_l3;
  double reuse_sigma_barn;
  DArray1d reuse_cum_xs_fluo;
  DArray1d reuse_cum_xs_Compton;
  DArray1d reuse_cum_xs_Rayleigh;
  int    reuse_Nq;
  double reuse_my_s_k2_sum;
  
%}

INITIALIZE %{

  /* energies en [keV], angles in [radians], XRL CSb cross sections are in [barn/atom] */
  xrl_error *error = NULL;
  int        i;

  XRayInit();

  shape=-1; /* -1:no shape, 0:cyl, 1:box, 2:sphere, 3:any-shape  */
  if (geometry && strlen(geometry) && strcmp(geometry, "NULL") && strcmp(geometry, "0")) {
    #ifndef USE_OFF
    fprintf(stderr,"Error: You are attempting to use an OFF geometry without -DUSE_OFF."
                   "You will need to recompile with that define set!\n");
    exit(-1);
    #else
    if (off_init(geometry, xwidth, yheight, zdepth, 0, &offdata)) {
      shape=3; thickness=0; concentric=0;
    }
    #endif
  }
  else if (xwidth && yheight && zdepth)  shape=1; /* box */
  else if (radius > 0 &&  yheight)       shape=0; /* cylinder */
  else if (radius > 0 && !yheight)       shape=2; /* sphere */

  if (shape < 0)
    exit(fprintf(stderr,"FluoPowder: %s: sample has invalid dimensions.\n"
                        "ERROR       Please check parameter values (xwidth, yheight, zdepth, radius).\n", NAME_CURRENT_COMP));

  if (!material || !strlen(material) || !strcmp(material, "NULL") || !strcmp(material, "0"))
    exit(fprintf(stderr, "ERROR: FluoPowder: %s: Null material specification.\n", NAME_CURRENT_COMP));

  if (order > 1 && flag_lorentzian)
    fprintf(stderr, "FluoPowder: WARNING: %s: Using flag_lorentzian=1 Lorentzian line-shape with order>1 may create artifacts.\n", NAME_CURRENT_COMP);

  // test if the material is given as a file
  char formula[16384];
  formula[0]='\0';
  FILE *file = Open_File(material, "r", NULL);
  if (file != NULL) {
    fclose(file);
    // open the material structure file (laz/lau/cif...)
    // search (case sensitive) along lines
    if (!fluo_get_material(material, formula))
      exit(fprintf(stderr, "ERROR: FluoPowder: %s: file %s does not contain material formulae.\n", NAME_CURRENT_COMP, material));

    MPI_MASTER(
    fprintf(stderr, "INFO: FluoPowder: %s: found material %s from file %s\n",
            NAME_CURRENT_COMP, formula, material);
    );

    // load Powder lines, when given as a valid file
    // set powder variable default before reading file
    if (flag_powder) {
      columns             = powder_format;
      line_info.V_0       = Vc;
      for (i=0; i< 8; i++) {
        line_info.column_order[i] = (int)columns[i];
      }
      line_info.DWfactor  = DW;
      line_info.Dd        = delta_d_d;
      line_info.rho       = density;
      line_info.at_weight = weight;
      line_info.at_nb     = nb_atoms;
      line_info.flag_barns= barns;
      strncpy(line_info.compname, NAME_CURRENT_COMP, 256);
      if (!powder_refl || !strlen(powder_refl) || !strcmp(powder_refl, "NULL") || !strcmp(powder_refl, "0"))
        strcpy(powder_refl, material);
      i = read_line_data(powder_refl, &line_info);
      if (i == 0) {
        MPI_MASTER(
        fprintf(stderr,"WARNING: FluoPowder: %s: reflection file %s is not valid (CIF/LAU/LAZ). Ignoring diffraction process.\n",
                      NAME_CURRENT_COMP, powder_refl);
        );
        flag_powder=0;
      }
    }
    if (flag_powder) {
      /* compute the scattering unit density from material weight and density */
      /* the weight of the scattering element is the chemical formula molecular weight
       * times the nb of chemical formulae in the scattering element (nb_atoms) */
      if (!line_info.V_0 && line_info.at_nb > 0
        && line_info.at_weight > 0 && line_info.rho > 0) {
        /* molar volume [cm^3/mol] = weight [g/mol] / density [g/cm^3] */
        /* atom density per Angs^3 = [mol/cm^3] * N_Avogadro *(1e-8)^3 */
        line_info.V_0 = line_info.at_nb
        /(line_info.rho/line_info.at_weight/1e24*6.02214199e23);
        }

        /* Factor 100 to convert from barns to fm^2 */
        line_info.XsectionFactor = line_info.flag_barns ? 100 : 1;

      if (line_info.V_0 <= 0) {
        MPI_MASTER(
          printf("WARNING: FluoPowder: %s: density/unit cell volume is NULL (Vc). Ignoring diffraction process.\n", NAME_CURRENT_COMP);
        );
        flag_powder=0;
      } else {

        struct line_data *L;
        L = line_info.list;

        line_info.q = malloc(line_info.count*sizeof(double));
        line_info.w = malloc(line_info.count*sizeof(double));
        line_info.my_s_k2 = malloc(line_info.count*sizeof(double));
        if (!line_info.q || !line_info.w || !line_info.my_s_k2)
          exit(fprintf(stderr,"ERROR: FluoPowder: %s: allocating memory (init)\n", NAME_CURRENT_COMP));
        for(i=0; i<line_info.count; i++)
        {
          line_info.my_s_k2[i] = 4*PI*PI*PI* 1.0 *(L[i].DWfactor ? L[i].DWfactor : 1)
            /(line_info.V_0*line_info.V_0)
            *(L[i].j * L[i].F2 / L[i].q)*line_info.XsectionFactor; // fm^2 based
          line_info.q[i] = L[i].q;
          line_info.w[i] = L[i].w;
        }
      }
    }

    strncpy(material, formula, 16384);
    // CIF: _chemical_formula_structural 'chemical_formulae'
    // CIF: _chemical_formula_sum 'chemical_formulae'
    // LAZ/LAU: # ATOM <at> <trailing>
    // LAZ/LAU: # Atom <at> <trailing>
    // LAZ/LAU: # TITLE <at> <at> ... [ trailing...]
    // CFL: Title <chemical_formulae>
    // CFL: Atom <at> <trailing>

  }

  compound = CompoundParser(material, &error); /* XRayLib */
  if (error != NULL) {
    exit(fprintf(stderr, "ERROR: %s: Invalid material %s: %s\n",
      NAME_CURRENT_COMP, material, error->message));
  }
  xrl_error_free(error);

  /* compute total density for raw material and display information ========= */
  if (weight <= 0) weight = compound->molarMass; /* g/mol */
  MPI_MASTER(
    printf("%s: Material %s mass fractions:\n",
      NAME_CURRENT_COMP, material);
  )

  double mat_density       = 0; /* g/cm3 */
  double sum_massFractions = 0;
  cum_massFractions        = create_darr1d(compound->nElements+1);
  cum_xs_fluo              = create_darr1d(compound->nElements+1);
  cum_xs_Compton           = create_darr1d(compound->nElements+1);
  cum_xs_Rayleigh          = create_darr1d(compound->nElements+1);
  cum_massFractions[0]     = 0;

  /* print material information, and check for elements */
  for (i=0; i< compound->nElements; i++) {
    int    Z      = compound->Elements[i];
    error = NULL;
    double Z_dens = ElementDensity(Z, &error);
    if (error != NULL)
      exit(fprintf(stderr, "ERROR: %s: Z=%i %s\n", NAME_CURRENT_COMP, Z, error->message));
    mat_density           += compound->massFractions[i]*Z_dens;
    sum_massFractions     += compound->massFractions[i];
    cum_massFractions[i+1] = sum_massFractions;
    MPI_MASTER(
      printf("  | %6.2g %%: Z=%3i %3s %8.3g [g/mol] %8.3g [g/cm3]\n",
        compound->massFractions[i]*100, Z, AtomicNumberToSymbol(Z,NULL), AtomicWeight(Z, NULL),
        Z_dens);
    )
  }
  xrl_error_free(error);
  if (density <= 0)        density        = mat_density;   /* g/cm3 */
  if (packing_factor <= 0) packing_factor = density/mat_density;

  /* molar volume [cm^3/mol] = weight [g/mol] / density [g/cm^3] */
  /* atom density per Angs^3 = [mol/cm^3] * N_Avogadro *(1e-8)^3 */
  fluo_rho = density/weight/1e24*NA; // atom density [at/Angs-3]
  MPI_MASTER(
    printf("%s: Material %s M=%g [g/mol] density=%g [g/cm3] rho=%g [at/Angs-3]",
      NAME_CURRENT_COMP, material, weight, density, fluo_rho);
    if (fabs(packing_factor-1) > 1e-2)
      printf(" packing_factor=%g", packing_factor);
    printf("\n");
  );
  if (0 < packing_factor && packing_factor < 1) fluo_rho *= packing_factor;

  /* target for scattering ================================================== */
  if (!target_index && !target_x && !target_y && !target_z) target_index=1;
  if (target_index)
  {
    Coords ToTarget;
    ToTarget = coords_sub(POS_A_COMP_INDEX(INDEX_CURRENT_COMP+target_index),POS_A_CURRENT_COMP);
    ToTarget = rot_apply(ROT_A_CURRENT_COMP, ToTarget);
    coords_get(ToTarget, &target_x, &target_y, &target_z);
  }
  if (!(target_x || target_y || target_z)) {
    MPI_MASTER(
    printf("WARNING: FluoPowder: %s: The target is not defined. Using 4PI for fluorescence.\n",
      NAME_CURRENT_COMP);
    );
  }
  // checks for d_pĥi focusing
  if (flag_powder && !d_phi) {
    if (focus_ah) d_phi=focus_ah;
    else if (focus_yh && (target_x || target_y || target_z)) {
      double target_dist2=target_x*target_x+target_y*target_y+target_z*target_z;
      d_phi = atan2(focus_yh,sqrt(target_dist2));
    }
  }

  n_fluo = n_Compton = n_Rayleigh = n_diff = 0;
  p_fluo = p_Compton = p_Rayleigh = p_diff = 0;

  // cached variables set to 0 (for SPLIT)
  reuse_nb=0;
  reuse_ki=reuse_l0=reuse_l1=reuse_l2=reuse_l3=reuse_sigma_barn=0;
  reuse_cum_xs_fluo              = create_darr1d(compound->nElements+1);
  reuse_cum_xs_Compton           = create_darr1d(compound->nElements+1);
  reuse_cum_xs_Rayleigh          = create_darr1d(compound->nElements+1);
  reuse_cum_xs_fluo[0]=reuse_cum_xs_Compton[0]=reuse_cum_xs_Rayleigh[0]=0;
%}

TRACE %{

int    intersect=0;       /* flag to continue/stop */
int    reuse    =0;       /* flag raised when reusing (SPLIT) */
int    type     =-1;      /* type of interaction */
double l0,  l1,  l2,  l3; /* distances for intersections */
double dl0, dl1, dl2, dl; /* distance intervals */
int    flag_concentric = 0;
int    flag_ishollow   = 0;
int    event_counter   = 0;         /* scattering event counter (multiple fluorescence) */
int    force_transmit  = 0;         /* Flag to handle cross-section weighting in case of finite order */
double sigma_barn=0, xs[5];         /* cross sections [barn/atom] fluo/Compton/Rayleigh/diff/transmit */
double aim_x=0, aim_y=0, aim_z=1;   /* Position of target relative to scattering point */


// powderN add-ons
int    Nq              = line_info.Nq;
double my_s_k2_sum     = 0;

#ifdef OPENACC
#ifdef USE_OFF
off_struct thread_offdata = offdata;
#endif
#else
#define thread_offdata offdata
#endif

double k, E;
double ki,pi;

/* Store Initial photon state */
k  = ki = sqrt(kx*kx+ky*ky+kz*kz); //  Angs-1
E  = K2E*k; // keV
pi = p;      // used to test for multiple fluo weighting and order cutoff

do { /* while (intersect) Loop over multiple scattering events */

  // test for a SPLIT event (same particle comes in)
  l0=l1=l2=l3=dl0=dl1=dl2=0;
  if (!event_counter && fabs(reuse_ki - ki) < 1e-15) {
    reuse     = 1;
    reuse_nb++;
    // use cached values and skip actual computation
    intersect = reuse_intersect;
    l0        = reuse_l0;
    l1        = reuse_l1;
    l2        = reuse_l2;
    l3        = reuse_l3;

  } else {
    // we have a different event: compute intersection lengths

    /* ========================================================================== */
    /*                                   GEOMETRY                                 */
    /* ========================================================================== */

    /* Intersection photon trajectory / sample (sample surface) */
    if (thickness >= 0) {
      if (shape==0)
        intersect=cylinder_intersect(&l0,&l3, x,y,z,kx,ky,kz, radius,yheight);
      else if (shape==1)
        intersect=box_intersect     (&l0,&l3, x,y,z,kx,ky,kz, xwidth,yheight,zdepth);
      else if (shape==2)
        intersect=sphere_intersect  (&l0,&l3, x,y,z,kx,ky,kz, radius);
      #ifdef USE_OFF
      else if (shape == 3)
        intersect=off_x_intersect(&l0, &l3, NULL, NULL, x, y, z, kx,ky,kz, thread_offdata );
      #endif
    } else {
      if (shape==0)
        intersect=cylinder_intersect(&l0,&l3, x,y,z,kx,ky,kz, radius-thickness,
          yheight-2*thickness > 0 ? yheight-2*thickness : yheight);
      else if (shape==1)
        intersect=box_intersect     (&l0,&l3, x,y,z,kx,ky,kz,
          xwidth-2*thickness > 0 ?  xwidth-2*thickness : xwidth,
          yheight-2*thickness > 0 ? yheight-2*thickness : yheight,
          zdepth-2*thickness > 0 ?  zdepth-2*thickness : zdepth);
      else if (shape==2)
        intersect=sphere_intersect  (&l0,&l3, x,y,z,kx,ky,kz, radius-thickness);
      #ifdef USE_OFF
      else if (shape == 3)
        intersect=off_x_intersect   (&l0, &l3, NULL, NULL, x, y, z, kx,ky,kz, thread_offdata );
      #endif
    }


    /* Computing the intermediate lengths */
    if (intersect && p_interact >= 0) {
      flag_ishollow = 0;
      if (thickness > 0) {
        if (shape==0 && cylinder_intersect(&l1,&l2, x,y,z,kx,ky,kz, radius-thickness,
          yheight-2*thickness > 0 ? yheight-2*thickness : yheight))
          flag_ishollow=1;
        else if (shape==2 && sphere_intersect   (&l1,&l2, x,y,z,kx,ky,kz, radius-thickness))
          flag_ishollow=1;
        else if (shape==1 && box_intersect(&l1,&l2, x,y,z,kx,ky,kz,
          xwidth-2*thickness > 0 ? xwidth-2*thickness : xwidth,
          yheight-2*thickness > 0 ? yheight-2*thickness : yheight,
          zdepth-2*thickness > 0 ? zdepth-2*thickness : zdepth))
          flag_ishollow=1;
      } else if (thickness<0) {
        if (shape==0 && cylinder_intersect(&l1,&l2, x,y,z,kx,ky,kz, radius,yheight))
          flag_ishollow=1;
        else if (shape==2 && sphere_intersect   (&l1,&l2, x,y,z,kx,ky,kz, radius))
          flag_ishollow=1;
        else if (shape==1 && box_intersect(&l1,&l2, x,y,z,kx,ky,kz, xwidth, yheight, zdepth))
          flag_ishollow=1;
      }
      if (l3 > 1000) l3=0;              // we passed the sample, far away
      if (!flag_ishollow) l1 = l2 = l3; /* no empty space inside */
    } /* if intersect */


    // store values for potential next SPLIT
    if (!event_counter) {
      reuse_intersect = intersect;
      reuse_l0        = l0;
      reuse_l1        = l1;
      reuse_l2        = l2;
      reuse_l3        = l3;
      reuse_ki        = ki;
    }
    reuse           = 0;
  } // if !reuse (SPLIT)

  if (intersect) { /* the photon hits the sample */

    if (l0 > 0) {  /* we are before the sample */
      PROP_DL(l0); /* propagates photon to the entry of the sample */
    } else if (l1 > 0 && l1 > l0) { /* we are inside first part of the sample */
      /* no propagation, stay inside */
    } else if (l2 > 0 && l2 > l1) { /* we are in the hole */
      PROP_DL(l2); /* propagate to inner surface of 2nd part of sample */
    } else if (l3 > 0 && l3 > l2) { /* we are in the 2nd part of sample */
      /* no propagation, stay inside */
    }

    dl0=l1-(l0 > 0 ? l0 : 0); /* Distance in first part of hollow/cylinder/box */
    dl1=l2-(l1 > 0 ? l1 : 0); /* Distance in hole */
    dl2=l3-(l2 > 0 ? l2 : 0); /* Distance in 2nd part of hollow cylinder */

    if (dl0 < 0) dl0 = 0;
    if (dl1 < 0) dl1 = 0;
    if (dl2 < 0) dl2 = 0;

    /* initialize concentric mode */
    if (concentric && !flag_concentric && l0 >= 0
     && shape==0 && thickness) {
      flag_concentric=1;
    }

    if (flag_concentric == 1) {
      dl1=dl2=0; /* force exit when reaching hole/2nd part */
    }

    if (!dl0 && !dl2) {
      intersect = 0; /* the sample was passed entirely */
    }
  } // if intersect (geometry)

  /* ========================================================================== */
  /*                             INTERACTION PROCESS                            */
  /* ========================================================================== */
  xs[FLUORESCENCE]=xs[COMPTON]=xs[RAYLEIGH]=xs[TRANSMISSION]=xs[DIFFRACTION]=sigma_barn=0;
  cum_xs_fluo[0] = cum_xs_Compton[0] = cum_xs_Rayleigh[0] = 0;
  
  if (intersect) {
    double my_s;
    int    i_Z,i;
    int    flag=0;
    double d_path, p_trans, p_scatt, mc_trans, mc_scatt;

    /* actual fluorescence calculation */

    /* compute total scattering cross section for incoming photon energy Ei */
    /* compute each contribution XS */
    if (!reuse) {
      for (i_Z=0; i_Z< compound->nElements; i_Z++) {
        int    Z   = compound->Elements[i_Z];
        double frac= compound->massFractions[i_Z];
        double xs_Z[3];

        // get Fluorescence xs
        XRMC_CrossSections(Z, E, xs_Z, flag_kissel); // [barn/atom]
        cum_xs_fluo[i_Z+1]     = cum_xs_fluo[i_Z]    +frac*xs_Z[FLUORESCENCE];
        cum_xs_Compton[i_Z+1]  = cum_xs_Compton[i_Z] +frac*xs_Z[COMPTON];
        cum_xs_Rayleigh[i_Z+1] = cum_xs_Rayleigh[i_Z]+frac*xs_Z[RAYLEIGH];
        for (i=0; i<3; i++) { xs[i] += frac*xs_Z[i]; }
      } // for Z in compound
      for (i=0; i<3; i++) sigma_barn += xs[i]; // total XS

      if (flag_powder) {
        // we add the diffraction XS
        Nq = calc_xsect(k, line_info.q, line_info.my_s_k2, line_info.count,
                        &my_s_k2_sum, &line_info);
        line_info.my_s_k2_sum = my_s_k2_sum;
        line_info.Nq          = Nq;
        line_info.k           = k;
        xs[DIFFRACTION]       = my_s_k2_sum/(k*k)/100/fluo_rho; // 100: fm^2 -> barn
        sigma_barn           += xs[DIFFRACTION];
      } else {
        xs[DIFFRACTION] = 0;
        Nq              = 0;
        my_s_k2_sum     = 0;
      }

      // store values into cache for SPLIT
      if (!event_counter) {
        for (i_Z=0; i_Z< compound->nElements+1; i_Z++) {
          reuse_cum_xs_fluo[i_Z]     = cum_xs_fluo[i_Z];
          reuse_cum_xs_Compton[i_Z]  = cum_xs_Compton[i_Z];
          reuse_cum_xs_Rayleigh[i_Z] = cum_xs_Rayleigh[i_Z];
        }
        reuse_sigma_barn          = sigma_barn;
        if (flag_powder) {
          reuse_cum_xs_diffraction  = xs[DIFFRACTION];
          reuse_Nq                  = Nq;
          reuse_my_s_k2_sum         = my_s_k2_sum;
        }
      }

    } else {
      // reuse cached values (SPLIT)
      for (i_Z=0; i_Z< compound->nElements+1; i_Z++) {
        cum_xs_fluo[i_Z]     = reuse_cum_xs_fluo[i_Z];
        cum_xs_Compton[i_Z]  = reuse_cum_xs_Compton[i_Z];
        cum_xs_Rayleigh[i_Z] = reuse_cum_xs_Rayleigh[i_Z];
        xs[FLUORESCENCE]      += reuse_cum_xs_fluo[i_Z];
        xs[COMPTON]           += reuse_cum_xs_Compton[i_Z];
        xs[RAYLEIGH]          += reuse_cum_xs_Rayleigh[i_Z];
      }
      sigma_barn   = reuse_sigma_barn;
      if (flag_powder) {
        xs[DIFFRACTION]        = reuse_cum_xs_diffraction;
        my_s_k2_sum= line_info.my_s_k2_sum=reuse_my_s_k2_sum;
        Nq         = line_info.Nq         =reuse_Nq;
      }
    }

    /* probability to absorb/scatter */
    my_s   = fluo_rho*100*sigma_barn; /* mu 100: convert from barns to fm^2. my_s in [1/m] */
    d_path = ( dl0 +dl2 );            /* total path lenght in sample */

    /* Proba of transmission/interaction along length d_path */
    p_trans = exp(-my_s*d_path); /* probability to not-interact (transmit) */
    //printf("sigma_barn=%g p_trans=%g\n", sigma_barn, p_trans);
    p_scatt = 1 - p_trans;       /* portion of beam which scatters */

    /* force a given fraction of the beam to scatter */
    if (!event_counter && p_interact>0 && p_interact<=1) {
      /* we force a portion of the beam to interact */
      /* This is used to improve statistics */
      mc_trans = 1-p_interact;
    } else {
      mc_trans = p_trans; /* 1 - p_scatt */
    }
    mc_scatt = 1 - mc_trans; /* portion of beam to scatter (or force to) */
    if (mc_scatt <= 0) ABSORB;

    if (!force_transmit && mc_scatt > 0 && (mc_scatt >= 1 || rand01() < mc_scatt)) {
      /* we "scatter" with one of the interaction processes */
      dl = -log(1 - rand0max((1 - exp(-my_s*d_path)))) / my_s; /* length */
      /* If t0 is in hole, propagate to next part of the hollow cylinder */
      if (dl1 > 0 && dl0 > 0 && dl > dl0) dl += dl1;
      /* photon propagation to the scattering point */
      PROP_DL(dl);
      p *= fabs(p_scatt/mc_scatt); /* account for p_interact, lower than 1 */

    } else { // force_transmit
      /* we go through the material without interaction, and exit */
      if (type <0) type = TRANSMISSION; // transmission
      intersect = 0;
      PROP_DL(d_path);
      /* attenuate beam by portion which is scattered (and left along) */
      p *= p_trans;
      if (!event_counter && p_interact>0 && p_interact<=1) p /= mc_trans;
      break; // end while (intersect)
    }

  } /* if intersect (propagate) */

  if (intersect) { /* scattering event */
    int    i_Z=-1, Z, line=-1;
    double solid_angle=0;
    double theta=0, dsigma=0, alpha=0;
    double Ef=0, dE=0;
    double kf=k, kf_x, kf_y, kf_z;  // next particle direction

    /* correct for XS total(photo+Compton+Rayleigh+Powder) > sum(fluo+Compton+Rayleigh+Powder) */
    dsigma = (xs[FLUORESCENCE]+xs[RAYLEIGH]+xs[COMPTON]+xs[DIFFRACTION])/sigma_barn;
    if (dsigma < 1) p *= dsigma; // < 1

    /* MC choose process from cross sections 'xs': fluo, Rayleigh, Compton, diff */
    type = XRMC_SelectInteraction(xs, DIFFRACTION+1, rand01()); // up to DIFFRACTION

    /* choose Z (element) on associated XS, taking into account mass-fractions */
    switch (type) {
      case FLUORESCENCE:
        i_Z = XRMC_SelectFromDistribution(cum_xs_fluo,     compound->nElements+1, rand01());
        break;
      case RAYLEIGH:
        if (!flag_rayleigh) ABSORB;
        i_Z = XRMC_SelectFromDistribution(cum_xs_Rayleigh, compound->nElements+1, rand01());
        break;
      case COMPTON:
        if (!flag_compton) ABSORB;
        i_Z = XRMC_SelectFromDistribution(cum_xs_Compton,  compound->nElements+1, rand01());
        break;
      case DIFFRACTION:
        if (!flag_powder) ABSORB;
        if (Nq > 1) {
          // choose a line among those possible, using F2 as relative probability/intensity
          line = XRMC_SelectInteraction(line_info.my_s_k2, Nq, rand01());
        } else line = 0;/* Select between Nq powder lines */
        break;
      default: // should never happen
        // printf("WARNING: %s: process %i unknown. Absorb.\n", NAME_CURRENT_COMP, type);
        ABSORB;
    }

    if (i_Z >= 0) {
      // fluorescence
      Z   = compound->Elements[i_Z];

      /* select outgoing vector */
      if ((target_x || target_y || target_z)) {
        aim_x = target_x-x;       /* Vector pointing at target (anal./det.) */
        aim_y = target_y-y;
        aim_z = target_z-z;
      }
      if(focus_aw && focus_ah) {
        randvec_target_rect_angular(&kf_x, &kf_y, &kf_z, &solid_angle,
          aim_x, aim_y, aim_z, focus_aw, focus_ah, ROT_A_CURRENT_COMP);
      } else if(focus_xw && focus_yh) {
        randvec_target_rect(&kf_x, &kf_y, &kf_z, &solid_angle,
          aim_x, aim_y, aim_z, focus_xw, focus_yh, ROT_A_CURRENT_COMP);
      } else {
        randvec_target_circle(&kf_x, &kf_y, &kf_z, &solid_angle, aim_x, aim_y, aim_z, focus_r);
      }
      p *= solid_angle/(4*PI); // correct for selected solid-angle

    } else if (line >= 0) {
      // powder diffraction
      double arg, tmp_kx, tmp_ky, tmp_kz, kout_x, kout_y, kout_z, nx, ny, nz, alpha0, sg=1;

      if (line_info.w[line])
        arg = line_info.q[line]*(1+line_info.w[line]*randnorm())/(2.0*k);
      else
        arg = line_info.q[line]/(2.0*k);
      if(fabs(arg) > 1) ABSORB; /* No bragg scattering possible   */
      theta = asin(arg);       /* Bragg scattering law           */
      if (tth_sign == 0) {
        sg = randpm1();
        if (sg > 0) sg = 1; else sg=-1;
      }
      else  {
        sg = tth_sign/fabs(tth_sign);
      }

      /* Choose point on Debye-Scherrer cone */
      if (d_phi)
      { /* relate height of detector to the height on DS cone */
        arg = sin(d_phi*DEG2RAD/2)/sin(2*theta);
        /* If full Debye-Scherrer cone is within d_phi, don't focus */
        if (arg < -1 || arg > 1) d_phi = alpha = 0;
        /* Otherwise, determine alpha to rotate from scattering plane
         *    into d_phi focusing area */
        else alpha = 2*asin(arg);
      }
      if (d_phi && alpha) {
        /* Focusing */
        alpha  = fabs(alpha);
        alpha0 = 0.5*randpm1()*alpha;
      }
      else
        alpha0 = M_PI*randpm1();

      // compute out-going direction
      if (fabs(kx/k) < fabs(kz/k)) {
        nx = 1; ny = 0; nz = 0;
      } else {
        nx = 0; ny = 0; nz = 1;
      }
      vec_prod(tmp_kx,tmp_ky,tmp_kz, kx,ky,kz, nx,ny,nz);

      /* k_out = rotate 'k' by 2*theta around tmp_k: Bragg angle */
      rotate(kout_x,kout_y,kout_z, kx,ky,kz, 2*sg*theta, tmp_kx,tmp_ky,tmp_kz);

      /* tmp_k = rotate k_out by alpha0 around 'k' (Debye-Scherrer cone) */
      rotate(tmp_kx,tmp_ky,tmp_kz, kout_x,kout_y,kout_z, alpha0, kx, ky, kz);
      kf_x = tmp_kx;
      kf_y = tmp_ky;
      kf_z = tmp_kz;

    } else ABSORB; // should never happen

    NORM(kf_x, kf_y, kf_z);  // normalize the outout direction |kf|=1

    // determine final energy
    switch (type) {
      case FLUORESCENCE: /* 0 Fluo: choose line */
        Ef      = XRMC_SelectFluorescenceEnergy(Z, E, &dE, flag_kissel, rand01()); // dE full-width in keV
        if (dE) {
          dE /= 2;  // half-width
          if (flag_lorentzian) dE  *= tan(PI/2*randpm1()); // Lorentzian distribution
          else                 dE  *= randnorm();          // Gaussian distribution
          Ef = Ef + dE;
        }
        kf      = Ef*E2K;
        theta   = acos(scalar_prod(kf_x,kf_y, kf_z, kx,ky,kz)/k);
        /* add polarisation factor */
        if (Ex!=0 || Ey!=0 || Ez!=0){
          double EE=sqrt(Ex*Ex+Ey*Ey+Ez*Ez);
          double s=scalar_prod(kf_x,kf_y,kf_z,Ex,Ey,Ez)/EE;
          p *= (1-s)*(1-s);
        } else {
          /*unpolarized light in - means an effective reduction according to only theta*/
          p *= (1+cos(theta)*cos(theta))*0.5;
        }
        n_fluo++;
        p_fluo += p;
        break;

      case RAYLEIGH:     /* 1 Rayleigh: Coherent, elastic    */
        theta      = acos(scalar_prod(kf_x,kf_y, kf_z, kx,ky,kz)/k); // k is the previous |k|
        dsigma     = DCSb_Rayl(Z,  E, theta, NULL); // [barn/at/st]
        p         *= 4*PI*dsigma/xs[RAYLEIGH];
        n_Rayleigh++;
        p_Rayleigh+= p;
        break;

      case COMPTON:      /* 2 Compton: Incoherent: choose final energy */
        theta      = acos(scalar_prod(kf_x,kf_y, kf_z, kx,ky,kz)/k); // k is the previous |k|
        dsigma     = DCS_Compt(Z,  E, theta, NULL); // [barn/at/st] E is the previous particle energy
        kf         = ComptonEnergy(E, theta, NULL)*E2K; /* XRayLib, fraction of emc2=511 keV */
        p         *= 4*PI*dsigma/xs[COMPTON];
        n_Compton++;
        p_Compton += p;
        break;

      case DIFFRACTION:  /* 3 diffraction: line chosen before */
        /* weight the outgoing signal according to polarization */
        if (Ex!=0 || Ey!=0 || Ez!=0){
          double EE=sqrt(Ex*Ex+Ey*Ey+Ez*Ez);
          double s=scalar_prod(kf_x,kf_y,kf_z,Ex,Ey,Ez)/EE;
          p *= (1-s)*(1-s);
        }else{
          /*unpolarized light in - means an effective reduction according to only theta*/
          p *= (1+cos(theta)*cos(theta))*0.5;
        }
        if (d_phi && alpha) {
          p *= alpha/PI;
        }
        n_diff++;
        p_diff += p;
        break;

      default:  // should never happen
        ABSORB;
    }

    kx = kf*kf_x;
    ky = kf*kf_y;
    kz = kf*kf_z;
    k  = kf;
    E  = K2E*kf;
    SCATTER;
    event_counter++;

    /* exit if multiple scattering order has been reached */
    if (!order) break; // skip final absorption
    // stop when order has been reached, or weighting is very low
    if (order && (event_counter >= order || p/pi < 1e-15)) { force_transmit=1; }

  } // if intersect (scatter)
} while(intersect); /* end do (intersect) (multiple scattering loop) */

%}

FINALLY %{
  FreeCompoundData(compound);

  if (n_fluo || n_Compton || n_Rayleigh || n_diff)
    MPI_MASTER(
      printf("INFO: %s: scattered intensity: fluo=%g Compton=%g Rayleigh=%g Diffraction=%g\n",
        NAME_CURRENT_COMP, p_fluo, p_Compton, p_Rayleigh, p_diff);
    );
%}

DISPLAY INHERIT Fluorescence

END


